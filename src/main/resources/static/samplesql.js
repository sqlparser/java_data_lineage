const sampleSQL = {
    athena: "INSERT INTO cities_usa (city,state)\nSELECT city,state FROM cities_world WHERE country='usa';",
    azuresql: '-- azure sql sample SQL\nCREATE VIEW [SalesLT].[vProductAndDescription]\nWITH SCHEMABINDING\nAS\n-- View (indexed or standard) to display products and product descriptions by language.\nSELECT\n    p.[ProductID]\n    ,p.[Name]\n    ,pm.[Name] AS [ProductModel]\n    ,pmx.[Culture]\n    ,pd.[Description]\nFROM [SalesLT].[Product] p\n    INNER JOIN [SalesLT].[ProductModel] pm\n    ON p.[ProductModelID] = pm.[ProductModelID]\n    INNER JOIN [SalesLT].[ProductModelProductDescription] pmx\n    ON pm.[ProductModelID] = pmx.[ProductModelID]\n    INNER JOIN [SalesLT].[ProductDescription] pd\n    ON pmx.[ProductDescriptionID] = pd.[ProductDescriptionID];',
    bigquery: "-- bigquery sample SQL\nMERGE dataset.DetailedInventory T\nUSING dataset.Inventory S\nON T.product = S.product\nWHEN NOT MATCHED AND s.quantity < 20 THEN\n  INSERT(product, quantity, supply_constrained, comments)\n  VALUES(product, quantity, true, ARRAY<STRUCT<created DATE, comment STRING>>[(DATE('2016-01-01'), 'comment1')])\nWHEN NOT MATCHED THEN\n  INSERT(product, quantity, supply_constrained)\n  VALUES(product, quantity, false)\n;",
    couchbase:
        '-- Couchbase\nSELECT t1.country, array_agg(t1.city), sum(t1.city_cnt) as apnum\nFROM (SELECT city, city_cnt, array_agg(airportname) as apnames, country\n      FROM `travel-sample` WHERE type = "airport"\n      GROUP BY city, country LETTING city_cnt = count(city) ) AS t1\nWHERE t1.city_cnt > 5\nGROUP BY t1.country;\n\nINSERT INTO `travel-sample` (key UUID(), value _country)\n    SELECT _country FROM `travel-sample` _country\n      WHERE type = "airport" AND airportname = "Heathrow";\n	  \nMERGE INTO all_empts a USING emps_deptb b ON KEY b.empId\nWHEN MATCHED THEN\n     UPDATE SET a.depts = a.depts + 1,\n     a.title = b.title || ", " || b.title\nWHEN NOT MATCHED THEN\n     INSERT  { "name": b.name, "title": b.title, "depts": b.depts, "empId": b.empId, "dob": b.dob }\n;\n\nUPDATE `travel-sample`\nSET foo = 9\nWHERE city = (SELECT raw city FROM `beer-sample` WHERE type = "brewery")\n;',
    databricks: `-- databricks\nCREATE OR REPLACE VIEW experienced_employee\n    (id COMMENT 'Unique identification number', Name)\n    COMMENT 'View for experienced employees'\n    AS SELECT id, name\n         FROM all_employee\n        WHERE working_years > 5;`,
    db2: `-- DB2\nSELECT PART, SUPPLIER, PRODNUM, PRODUCT\nFROM (SELECT PART, PROD# AS PRODNUM, SUPPLIER\nFROM PARTS\nWHERE PROD# < 200) AS PARTX\nLEFT OUTER JOIN PRODUCTS\nON PRODNUM = PROD#;\n\n\nSELECT D.DEPTNO, D.DEPTNAME,\nEMPINFO.AVGSAL, EMPINFO.EMPCOUNT\nFROM DEPT D,\nTABLE (SELECT AVG(E.SALARY) AS AVGSAL,\nCOUNT(*) AS EMPCOUNT\nFROM EMP E\nWHERE E.WORKDEPT = D.DEPTNO)\nAS EMPINFO;\n\nDELETE FROM EMP X\nWHERE ABSENT = (SELECT MAX(ABSENT) FROM EMP Y\nWHERE X.WORKDEPT = Y.WORKDEPT);\n\nINSERT INTO SMITH.TEMPEMPL\nSELECT *\nFROM DSN8B10.EMP;\n\nINSERT INTO B.EMP_PHOTO_RESUME\n-- OVERRIDING USER VALUE\nSELECT * FROM DSN8B10.EMP_PHOTO_RESUME;\n\nMERGE INTO RECORDS AR\nUSING (VALUES (:hv_activity, :hv_description)\n--FOR :hv_nrows ROWS\n)\nAS AC (ACTIVITY, DESCRIPTION)\nON (AR.ACTIVITY = AC.ACTIVITY)\nWHEN MATCHED THEN UPDATE SET DESCRIPTION = AC.DESCRIPTION\nWHEN NOT MATCHED THEN INSERT (ACTIVITY, DESCRIPTION)\nVALUES (AC.ACTIVITY, AC.DESCRIPTION)\n-- NOT ATOMIC CONTINUE ON SQLEXCEPTION\n;\n\nCREATE TABLE T1 (COL1 CHAR(7), COL2 INT);\nINSERT INTO T1 VALUES ('abc', 10);\nMERGE INTO T1 AS A\nUSING TABLE (VALUES ('rsk', 3 ) ) AS T (ID, AMOUNT)\nON A.COL1 = T.ID\nWHEN MATCHED\nTHEN UPDATE SET COL2 = CARDINALITY(CHARA)\nWHEN NOT MATCHED\nTHEN INSERT (COL1, COL2 ) VALUES (T.ID, CARDINALITY(INTA));\n\nUPDATE DSN8B10.EMP\nSET PROJSIZE = (SELECT COUNT(*)\nFROM DSN8B10.PROJ\nWHERE DEPTNO = 'E21')\nWHERE WORKDEPT = 'E21';\n\nCREATE VIEW DSN8B10.FIRSTQTR (SNO, CHARGES, DATE) AS\nSELECT SNO, CHARGES, DATE\nFROM MONTH1\nWHERE DATE BETWEEN '01/01/2000' and '01/31/2000'\nUNION All\nSELECT SNO, CHARGES, DATE\nFROM MONTH2\nWHERE DATE BETWEEN '02/01/2000' and '02/29/2000'\nUNION All\nSELECT SNO, CHARGES, DATE\nFROM MONTH3\nWHERE DATE BETWEEN '03/01/2000' and '03/31/2000';\n\n/* not supported yet\n\nEXEC SQL\nDECLARE C1 CURSOR FOR\nSELECT BONUS\nFROM DSN8710.EMP\nWHERE WORKDEPT = 'E12'\nFOR UPDATE OF BONUS;\n\nEXEC SQL\nUPDATE DSN8710.EMP\nSET BONUS = ( SELECT .10 * SALARY FROM DSN8710.EMP Y\nWHERE EMPNO = Y.EMPNO )\nWHERE CURRENT OF C1;\n*/`,
    gaussdb: `-- gaussdb\n CREATE TABLE hr.section\n(\n  id           INTEGER      NOT NULL,  \n  code         VARCHAR(16)  NOT NULL,  \n  name         VARCHAR(50)  NOT NULL, \n  place_id     INTEGER      NOT NULL,\n  place_name   VARCHAR(50)  NOT NULL                    \n);\n\nCREATE UNIQUE INDEX hr_section_index1 ON hr.section(id);\n\nCREATE TABLE hr.deptinfo AS SELECT * FROM hr.deptbase WHERE id > 365;\n\nCREATE VIEW deptinView AS\n    SELECT * FROM hr.deptinfo WHERE id > 100;\n    \nCREATE OR REPLACE PROCEDURE dept_proc()\nAS \ndeclare\n    DEPT_NAME VARCHAR(100);\n    DEPT_LOC  INTEGER;\n    CURSOR C1 IS \n        SELECT name, place_id FROM hr.section WHERE place_id <= 50;\nBEGIN\n    OPEN C1;\n    LOOP\n        FETCH C1 INTO DEPT_NAME, DEPT_LOC;\n        EXIT WHEN C1%NOTFOUND;\n        DBMS_OUTPUT.PUT_LINE(DEPT_NAME||\'---\'||DEPT_LOC);\n    END LOOP;\n    CLOSE C1;\nEND;`,
    greenplum: `-- greenplum sample SQL\n\nWITH regional_sales AS (\n     SELECT region, SUM(amount) AS total_sales\n     FROM orders\n     GROUP BY region\n  ), top_regions AS (\n     SELECT region\n     FROM regional_sales\n     WHERE total_sales > (SELECT SUM(total_sales)/10 FROM regional_sales)\n  )\nSELECT region,\n    product,\n    SUM(quantity) AS product_units,\n    SUM(amount) AS product_sales\nFROM orders\nWHERE region IN (SELECT region FROM top_regions)\nGROUP BY region, product;\n\nWITH RECURSIVE search_graph(id, link, data, depth, path, cycle) AS (\n        SELECT g.id, g.link, g.data, 1,\n          ARRAY[g.id],\n          false\n        FROM graph g\n      UNION ALL\n        SELECT g.id, g.link, g.data, sg.depth + 1,\n          path || g.id,\n          g.id = ANY(path)\n        FROM graph g, search_graph sg\n        WHERE g.id = sg.link AND NOT cycle\n)\nSELECT * FROM search_graph;\n\nINSERT INTO films SELECT * FROM tmp_films WHERE date_prod < '2004-05-07';\n\nUPDATE employees SET sales_count = sales_count + 1 WHERE id =\n  (SELECT id FROM accounts WHERE name = 'Acme Corporation');\n  \n  \nUPDATE accounts SET (contact_last_name, contact_first_name) =\n    (SELECT last_name, first_name FROM salesmen\n     WHERE salesmen.id = accounts.sales_id);  `,
    hana: `-- sap hana sample SQLCODE\n\nCREATE TABLE t1(a INT, b INT, c INT);  \nCREATE TABLE t2(a INT, b INT, c INT);\nINSERT INTO t1 VALUES(1,12,13);            \nINSERT INTO t2 VALUES(2,120,130);\n            \nINSERT INTO t1 WITH alias1 AS (SELECT * FROM t1) SELECT * FROM alias1;\nINSERT INTO t1 WITH w1 AS (SELECT * FROM t2) SELECT * FROM w1;\n\nSELECT TA.a1, TB.b1 FROM TA, LATERAL (SELECT b1, b2 FROM TB WHERE b3 = TA.a3) TB WHERE TA.a2 = TB.b2;\n\nUPDATE T1 SET C1 = ARRAY( SELECT C1 FROM T0 ) WHERE ID = 1;\n\nUPSERT T1 VALUES ( 1, ARRAY ( SELECT C1 FROM T0 ) ) WHERE ID = 1;\n\n\nMERGE INTO "my_schema".t1 USING "my_schema".t2 ON "my_schema".t1.a = "my_schema".t2.a\n WHEN MATCHED THEN UPDATE SET "my_schema".t1.b = "my_schema".t2.b\n WHEN NOT MATCHED THEN INSERT VALUES("my_schema".t2.a, "my_schema".t2.b);\n \n MERGE INTO T1 USING T2 ON T1.A = T2.A\n WHEN MATCHED AND T1.A > 1 THEN UPDATE SET B = T2.B\n WHEN NOT MATCHED AND T2.A > 3 THEN INSERT VALUES (T2.A, T2.B);\n \n \n /* not support yet\n CREATE VIEW Illness_K_Anon (ID, Gender, Location, Illness)\n            AS SELECT ID, Gender, City AS Location, Illness\n            FROM Illness\n            WITH ANONYMIZATION ( ALGORITHM 'K-ANONYMITY'\n            PARAMETERS '{"data_change_strategy": "qualified", "k": 2}'\n            COLUMN ID PARAMETERS '{"is_sequence": true}'\n            COLUMN Gender PARAMETERS '{"is_quasi_identifier":true, "hierarchy":{"embedded": [["F"], ["M"]]}}'\n            COLUMN Location PARAMETERS '{"is_quasi_identifier":true, "hierarchy":{"embedded": [["Paris", "France"], ["Munich", "Germany"], ["Nice", "France"]]}}');\n*/`,
    hive:
        "-- Hive sample sql\nSELECT pageid, adid\nFROM pageAds LATERAL VIEW explode(adid_list) adTable AS adid;\n\nCREATE DATABASE merge_data;\n \nCREATE TABLE merge_data.transactions(\n\tID int,\n\tTranValue string,\n\tlast_update_user string)\nPARTITIONED BY (tran_date string)\nCLUSTERED BY (ID) into 5 buckets \nSTORED AS ORC TBLPROPERTIES ('transactional'='true');\n \nCREATE TABLE merge_data.merge_source(\n\tID int,\n\tTranValue string,\n\ttran_date string)\nSTORED AS ORC;\n\n MERGE INTO merge_data.transactions AS T \n USING merge_data.merge_source AS S\n ON T.ID = S.ID and T.tran_date = S.tran_date\n WHEN MATCHED AND (T.TranValue != S.TranValue AND S.TranValue IS NOT NULL) THEN UPDATE SET TranValue = S.TranValue, last_update_user = 'merge_update'\n WHEN MATCHED AND S.TranValue IS NULL THEN DELETE\n WHEN NOT MATCHED THEN INSERT VALUES (S.ID, S.TranValue, 'merge_insert', S.tran_date)",
    impala: `-- Impala sample sql\ninsert into t2 select * from t1;\ninsert into t2 select c1, c2 from t1;\n\nCREATE VIEW v5 AS SELECT c1, CAST(c3 AS STRING) c3, CONCAT(c4,c5) c5, TRIM(c6) c6, "Constant" c8 FROM t1;\n\nCREATE VIEW v7 (c1 COMMENT 'Comment for c1', c2) COMMENT 'Comment for v7' AS SELECT t1.c1, t1.c2 FROM t1;`,
    informix: `-- Informix sample sql\nCREATE VIEW myview (cola, colb) AS\nSELECT colx, coly from firsttab\nUNION\nSELECT colx, colz from secondtab;\n\nCREATE VIEW palo_alto AS\nSELECT * FROM customer WHERE city = 'Palo Alto'\nWITH CHECK OPTION\n;\n\nMERGE INTO t2 AS o USING t1 AS n ON o.f1 = n.f1\nWHEN NOT MATCHED THEN INSERT ( o.f1,o.f2)\nVALUES ( n.f1,n.f2)\n;\n\nINSERT INTO t2(f1, f2)\nSELECT t1.f1, t1.f2 FROM t1\nWHERE NOT EXISTS\n(SELECT f1, f2 FROM t2\nWHERE t2.f1 = t1.f1);\n\nMERGE INTO sale USING new_sale AS n\nON sale.cust_id = n.cust_id\nWHEN MATCHED THEN UPDATE\nSET sale.salecount = sale.salecount + n.salecount\nWHEN NOT MATCHED THEN INSERT (cust_id, salecount)\nVALUES (n.cust_id, n.salecount);\n\n\nMERGE INTO customer c\nUSING ext_customer e\nON c.customer_num=e.customer_num AND c.fname=e.fname AND c.lname=e.lname\nWHEN NOT MATCHED THEN\nINSERT\n(c.fname, c.lname, c.company, c.address1, c.address2,\nc.city, c.state, c.zipcode, c.phone)\nVALUES\n(e.fname, e.lname, e.company, e.address1, e.address2,\ne.city, e.state, e.zipcode, e.phone)\nWHEN MATCHED THEN UPDATE\nSET c.fname = e.fname,\nc.lname = e.lname,\nc.company = e.company,\nc.address1 = e.address1,\nc.address2 = e.address2,\nc.city = e.city,\nc.state = e.state,\nc.zipcode = e.zipcode,\nc.phone = e.phone ;\n\n\nUPDATE nmosdb@wnmserver1:test\nSET name=(SELECT name FROM test\nWHERE test.id = nmosdb@wnmserver1:test.id)\nWHERE EXISTS(\nSELECT 1 FROM test WHERE test.id = nmosdb@wnmserver1:test.id\n);\n\nUPDATE orders\nSET ship_charge =\n(SELECT SUM(total_price) * .07 FROM items\nWHERE orders.order_num = items.order_num)\nWHERE orders.order_num = 1001;`,
    mdx: 'mdx',
    mysql:
        "-- mysql sample sql\n\nSELECT\n  salesperson.name,\n  -- find maximum sale size for this salesperson\n  (SELECT MAX(amount) AS amount\n    FROM all_sales\n    WHERE all_sales.salesperson_id = salesperson.id)\n  AS amount,\n  -- find customer for this maximum size\n  (SELECT customer_name\n    FROM all_sales\n    WHERE all_sales.salesperson_id = salesperson.id\n    AND all_sales.amount =\n         -- find maximum size, again\n         (SELECT MAX(amount) AS amount\n           FROM all_sales\n           WHERE all_sales.salesperson_id = salesperson.id))\n  AS customer_name\nFROM\n  salesperson;\n  \n  \nSELECT\n  salesperson.name,\n  max_sale.amount,\n  max_sale_customer.customer_name\nFROM\n  salesperson,\n  -- calculate maximum size, cache it in transient derived table max_sale\n  (SELECT MAX(amount) AS amount\n    FROM all_sales\n    WHERE all_sales.salesperson_id = salesperson.id)\n  AS max_sale,\n  -- find customer, reusing cached maximum size\n  (SELECT customer_name\n    FROM all_sales\n    WHERE all_sales.salesperson_id = salesperson.id\n    AND all_sales.amount =\n        -- the cached maximum size\n        max_sale.amount)\n  AS max_sale_customer;\n\nSELECT\n  salesperson.name,\n  max_sale.amount,\n  max_sale.customer_name\nFROM\n  salesperson,\n  -- find maximum size and customer at same time\n  LATERAL\n  (SELECT amount, customer_name\n    FROM all_sales\n    WHERE all_sales.salesperson_id = salesperson.id\n    ORDER BY amount DESC LIMIT 1)\n  AS max_sale;\n\nWITH RECURSIVE employee_paths (id, name, path) AS\n(\n  SELECT id, name, CAST(id AS CHAR(200))\n    FROM employees\n    WHERE manager_id IS NULL\n  UNION ALL\n  SELECT e.id, e.name, CONCAT(ep.path, ',', e.id)\n    FROM employee_paths AS ep JOIN employees AS e\n      ON ep.id = e.manager_id\n)\nSELECT * FROM employee_paths ORDER BY path;\n\nUPDATE table1 t1 \nJOIN table2 t2 ON t1.field1 = t2.field1 \nJOIN table3 t3 ON (t3.field1=t2.field2 AND t3.field3 IS NOT NULL) \nSET t1.field9=t3.field9\nWHERE t1.field5=1\nAND t1.field9 IS NULL  ",
    netezza: `-- netezza sample sql\n\nINSERT INTO films SELECT * FROM tmp;\n\nINSERT INTO emp_copy WITH employee AS (select * from\nemp) SELECT * FROM employee;\n\nUPDATE emp_copy SET grp = 'gone' WHERE id =\n(WITH employee AS (select * from emp) SELECT id FROM employee WHERE id\n= 1);\n\nDELETE FROM emp_copy WHERE id IN\n(WITH employee AS (SELECT * FROM emp_copy where grp = 'gone')\nSELECT id FROM employee);\n\n\nWITH manager (mgr_id, mgr_name, mgr_dept) AS\n	(SELECT id, name, grp\n	FROM emp_copy\n	WHERE mgr = id AND grp != 'gone'),\nemployee (emp_id, emp_name, emp_mgr) AS\n	(SELECT id, name, mgr_id\n	FROM emp_copy JOIN manager ON grp = mgr_dept),\nmgr_cnt (mgr_id, mgr_reports) AS\n	(SELECT mgr, COUNT (*)\n	FROM emp_copy\n	WHERE mgr != id\n	GROUP BY mgr)\nSELECT *\nFROM employee JOIN manager ON emp_mgr = mgr_id \n	JOIN mgr_cnt ON emp_mgr = mgr_id \nWHERE emp_id != mgr_id\nORDER BY mgr_dept;`,
    openedge: `-- openedge sample sql\n\nCREATE VIEW ne_customers AS\nSELECT name, address, city, state\nFROM customer\nWHERE state IN ( 'NH', 'MA', 'ME', 'RI', 'CT', 'VT' )\nWITH CHECK OPTION ;\n\nINSERT INTO neworders (order_no, product, qty)\nSELECT order_no, product, qty\nFROM orders\nWHERE order_date = SYSDATE ;\n\nUPDATE OrderLine\nSET (ItemNum, Price) =\n(SELECT ItemNum, Price * 3\nFROM Item\nWHERE ItemName = 'gloves')\nWHERE OrderNum = 21 ;\n\nUpdate Orderline\nSET (Itemnum) =\n(Select Itemnum\nFROM Item\nWHERE Itemname = 'Tennis balls')\nWHERE Ordernum = 20;`,
    oracle: `CREATE VIEW vsal \nAS \n  SELECT a.deptno                  "Department", \n         a.num_emp / b.total_count "Employees", \n         a.sal_sum / b.total_sal   "Salary" \n  FROM   (SELECT deptno, \n                 Count()  num_emp, \n                 SUM(sal) sal_sum \n          FROM   scott.emp \n          WHERE  city = 'NYC' \n          GROUP  BY deptno) a, \n         (SELECT Count()  total_count, \n                 SUM(sal) total_sal \n          FROM   scott.emp \n          WHERE  city = 'NYC') b \n;\n\nINSERT ALL\n	WHEN ottl < 100000 THEN\n		INTO small_orders\n			VALUES(oid, ottl, sid, cid)\n	WHEN ottl > 100000 and ottl < 200000 THEN\n		INTO medium_orders\n			VALUES(oid, ottl, sid, cid)\n	WHEN ottl > 200000 THEN\n		into large_orders\n			VALUES(oid, ottl, sid, cid)\n	WHEN ottl > 290000 THEN\n		INTO special_orders\nSELECT o.order_id oid, o.customer_id cid, o.order_total ottl,\no.sales_rep_id sid, c.credit_limit cl, c.cust_email cem\nFROM orders o, customers c\nWHERE o.customer_id = c.customer_id;\n\ncreate table scott.dept(   \n  deptno     number(2,0),   \n  dname      varchar2(14),   \n  loc        varchar2(13),   \n  constraint pk_dept primary key (deptno)   \n);\n\ncreate table scott.emp(   \n  empno    number(4,0),   \n  ename    varchar2(10),   \n  job      varchar2(9),   \n  mgr      number(4,0),   \n  hiredate date,   \n  sal      number(7,2),   \n  comm     number(7,2),   \n  deptno   number(2,0),   \n  constraint pk_emp primary key (empno),\n  constraint fk_deptno foreign key (deptno) references dept (deptno) \n);`,
    postgresql: `-- postgresql sample sql\n\ncreate view v2 as \nSELECT distributors.name\nFROM distributors\nWHERE distributors.name LIKE 'W%'\nUNION\nSELECT actors.name\nFROM actors\nWHERE actors.name LIKE 'W%';\n\n\nWITH t AS (\nSELECT random() as x FROM generate_series(1, 3)\n)\nSELECT * FROM t\nUNION ALL\nSELECT * FROM t\n;\n\ncreate view v3 as \nWITH RECURSIVE employee_recursive(distance, employee_name, manager_name) AS (\nSELECT 1, employee_name, manager_name\nFROM employee\nWHERE manager_name = 'Mary'\nUNION ALL\nSELECT er.distance + 1, e.employee_name, e.manager_name\nFROM employee_recursive er, employee e\nWHERE er.employee_name = e.manager_name\n)\nSELECT distance, employee_name FROM employee_recursive;\n\nWITH upd AS (\nUPDATE employees SET sales_count = sales_count + 1 WHERE id =\n(SELECT sales_person FROM accounts WHERE name = 'Acme Corporation')\nRETURNING *\n)\nINSERT INTO employees_log SELECT *, current_timestamp FROM upd;\n\n\n/* not implemented\nCREATE RECURSIVE VIEW nums_1_100 (n) AS\nVALUES (1)\nUNION ALL\nSELECT n+1 FROM nums_1_100 WHERE n < 100;\n*/`,
    presto: 'CREATE TABLE orders_column_aliased (order_date, total_price)\nAS\nSELECT orderdate, totalprice\nFROM orders;',
    redshift:
        "-- redshift sample sql\nCreate table sales(\n dateid int,\n  venuestate char(80),\n  venuecity char(40),\n venuename char(100),\ncatname char(50),\nQtr int,\nqtysold int,\n  pricepaid int,\nYear date\n);\ncreate view sales_vw as\nselect * from public.sales\nunion all\nselect * from spectrum.sales\n;\n\ninsert into category_ident(catgroup,catname,catdesc)\nselect catgroup,catname,catdesc from category;\n\nUPDATE category \nSET    catdesc = 'Broadway Musical' \nWHERE  category.catid IN (SELECT category.catid \n                          FROM   category \n                                 JOIN event \n                                   ON category.catid = event.catid \n                                 JOIN venue \n                                   ON venue.venueid = event.venueid \n                                 JOIN sales \n                                   ON sales.eventid = event.eventid \n                          WHERE  venuecity = 'New York City' \n                                 AND catname = 'Musicals'); \n\nupdate category set catid=100\nfrom event join category cat on event.catid=cat.catid\nwhere cat.catgroup='Concerts';\n\nSELECT qtr, \n       Sum(pricepaid)           AS qtrsales, \n       (SELECT Sum(pricepaid) \n        FROM   sales \n               JOIN date \n                 ON sales.dateid = date.dateid \n        WHERE  qtr = '1' \n               AND year = 2008) AS q1sales \nFROM   sales \n       JOIN date \n         ON sales.dateid = date.dateid \nWHERE  qtr IN( '2', '3' ) \n       AND year = 2008 \nGROUP  BY qtr \nORDER  BY qtr; \n\n\nWITH venue_sales \n     AS (SELECT venuename, \n                venuecity, \n                Sum(pricepaid) AS venuename_sales \n         FROM   sales, \n                venue, \n                event \n         WHERE  venue.venueid = event.venueid \n                AND event.eventid = sales.eventid \n         GROUP  BY venuename, \n                   venuecity), \n     top_venues \n     AS (SELECT venuename \n         FROM   venue_sales \n         WHERE  venuename_sales > 800000) \nSELECT venuename, \n       venuecity, \n       venuestate, \n       Sum(qtysold)   AS venue_qty, \n       Sum(pricepaid) AS venue_sales \nFROM   sales, \n       venue, \n       event \nWHERE  venue.venueid = event.venueid \n       AND event.eventid = sales.eventid \n       AND venuename IN(SELECT venuename \n                        FROM   top_venues) \nGROUP  BY venuename, \n          venuecity, \n          venuestate \nORDER  BY venuename; ",
    snowflake: `-- snowflake sample sql\n\ncreate or replace secure view myview comment='Test secure view' as select * from mytable;\n\n\ninsert into employees(first_name, last_name, workphone, city,postal_code)\n  select\n    contractor_first,contractor_last,worknum,null,zip_code\n  from contractors\n  where contains(worknum,'650');\n  \ninsert into employees (first_name,last_name,workphone,city,postal_code)\n  with cte as\n    (select contractor_first as first_name,contractor_last as last_name,worknum as workphone,city,zip_code as postal_code\n     from contractors)\n  select first_name,last_name,workphone,city,postal_code\n  from cte;\n\ninsert into emp (id,first_name,last_name,city,postal_code,ph)\n  select a.id,a.first_name,a.last_name,a.city,a.postal_code,b.ph\n  from emp_addr a\n  inner join emp_ph b on a.id = b.id;\n\ninsert overwrite all\n  into t1\n  into t1 (c1, c2, c3) values (n2, n1, default)\n  into t2 (c1, c2, c3)\n  into t2 values (n3, n2, n1)\nselect n1, n2, n3 from src;\n\ninsert all\n  when n1 > 100 then\n    into t1\n  when n1 > 10 then\n    into t1\n    into t2\n  else\n    into t2\nselect n1 from src;\n\ninsert all\ninto t1 values (key, a)\nselect src1.key as key, src1.a as a\nfrom src1, src2 where src1.key = src2.key;\n\n\nmerge into target\n  using src on target.k = src.k\n  when matched and src.v = 11 then delete\n  when matched then update set target.v = src.v;\n\nmerge into target using (select k, max(v) as v from src group by k) as b on target.k = b.k\n  when matched then update set target.v = b.v\n  when not matched then insert (k, v) values (b.k, b.v);\n\nmerge into members m\n  using (\n  select id, date\n  from signup\n  where datediff(day, current_date(), signup.date::date) < -30) s on m.id = s.id\n  when matched then update set m.fee = 40;\n\nupdate t1\n  set t1.number_column = t1.number_column + t2.number_column, t1.text_column = 'ASDF'\n  from t2\n  where t1.key_column = t2.t1_key and t1.number_column < 10;\n\nupdate target set v = b.v\n  from (select k, min(v) v from src group by k) b\n  where target.k = b.k;  `,
    sparksql:
        "-- sparksql sample sql\n\nCREATE TABLE person (id INT, name STRING, age INT, class INT, address STRING);\n\nSELECT * FROM person\n    PIVOT (\n        SUM(age) AS a, AVG(class) AS c\n        FOR name IN ('John' AS john, 'Mike' AS mike)\n    );",
    mssql:
        "-- sql server sample sql\nCREATE TABLE dbo.EmployeeSales  \n( DataSource   varchar(20) NOT NULL,  \n  BusinessEntityID   varchar(11) NOT NULL,  \n  LastName     varchar(40) NOT NULL,  \n  SalesDollars money NOT NULL  \n);  \nGO  \nCREATE PROCEDURE dbo.uspGetEmployeeSales   \nAS   \n    SET NOCOUNT ON;  \n    SELECT 'PROCEDURE', sp.BusinessEntityID, c.LastName,   \n        sp.SalesYTD   \n    FROM Sales.SalesPerson AS sp    \n    INNER JOIN Person.Person AS c  \n        ON sp.BusinessEntityID = c.BusinessEntityID  \n    WHERE sp.BusinessEntityID LIKE '2%'  \n    ORDER BY sp.BusinessEntityID, c.LastName;  \nGO  \n--INSERT...SELECT example  \nINSERT INTO dbo.EmployeeSales  \n    SELECT 'SELECT', sp.BusinessEntityID, c.LastName, sp.SalesYTD   \n    FROM Sales.SalesPerson AS sp  \n    INNER JOIN Person.Person AS c  \n        ON sp.BusinessEntityID = c.BusinessEntityID  \n    WHERE sp.BusinessEntityID LIKE '2%'  \n    ORDER BY sp.BusinessEntityID, c.LastName;  \nGO  \n\n\nCREATE VIEW hiredate_view  \nAS   \nSELECT p.FirstName, p.LastName, e.BusinessEntityID, e.HireDate  \nFROM HumanResources.Employee e   \nJOIN Person.Person AS p ON e.BusinessEntityID = p.BusinessEntityID ;  \nGO  \n\nCREATE VIEW view1  \nAS \nSELECT fis.CustomerKey, fis.ProductKey, fis.OrderDateKey, \n  fis.SalesTerritoryKey, dst.SalesTerritoryRegion  \nFROM FactInternetSales AS fis   \nLEFT OUTER JOIN DimSalesTerritory AS dst   \nON (fis.SalesTerritoryKey=dst.SalesTerritoryKey);  \n\nGO  \nSELECT ROW_NUMBER() OVER(PARTITION BY s.PostalCode ORDER BY s.SalesYTD DESC) AS \"Row Number\",   \n    p.LastName, s.SalesYTD, a.PostalCode  \nFROM Sales.SalesPerson AS s   \n    INNER JOIN Person.Person AS p   \n        ON s.BusinessEntityID = p.BusinessEntityID  \n    INNER JOIN Person.Address AS a   \n        ON a.AddressID = p.BusinessEntityID  \nWHERE s.TerritoryID IS NOT NULL   \n    AND s.SalesYTD <> 0  \nORDER BY s.PostalCode;",
    sybase:
        '-- sybase sample sql\n\ncreate view accounts (title, advance, amt_due)\nas select title, advance, price * total_sales\nfrom titles\nwhere price > $5\n\ncreate view cities\n(authorname, acity, publishername, pcity)\nas select authors.au_lname, authors.city, publishers.pub_name,\npublishers.city\nfrom authors, publishers\nwhere authors.city = publishers.city;\n\ncreate view cities2\nas select authorname = authors.au_lname,\nacity = authors.city, publishername = authors.pub_name, pcity =\npublishers.city\nfrom authors, publishers\nwhere authors.city = publishers.city\n;\n\ncreate view psych_titles as\nselect *\nfrom (select * from titles\nwhere type = "psychology") dt_psych\n;\n\ninsert newpublishers (pub_id, pub_name)\nselect pub_id, pub_name\nfrom publishers\nwhere pub_name="New Age Data"\n;\n\nmerge into GlobalSales\n(Item_number, Description, Quantity)as G\nusing DailySales as D\nON D.Item_number = G.Item_number\nwhen not matched\nthen\ninsert (Item_number, Description, Quantity )\nvalues (D.Item_number, D.Description, D.Quantity)\nwhen matched\nthen update set\nG.Quantity = G.Quantity + D.Quantity\n;\n\nupdate titles\nset total_sales = sales.total_sales + sales.qty\nfrom titles, salesdetail, sales\nwhere titles.title_id = salesdetail.title_id\nand salesdetail.stor_id = sales.stor_id\nand salesdetail.ord_num = sales.ord_num\nand sales.date in\n(select max (sales.date) from sales)\n;',
    teradata:
        "-- teradata sample sql\n\nINSERT INTO promotion (deptnum, empname, yearsexp)\nSELECT deptno, name, yrsexp\nFROM employee\nWHERE yrsexp > 10 ;\n\n-- Teradata Database interprets t1 in the scalar subquery as a distinct instance of\n-- t1 rather than as the target table t1 of the insert operation\n/* not supported yet\nINSERT INTO t1 VALUES (1,2,3 (SELECT d2\nFROM t2\nWHERE a2=t1.a1));\n*/\n\n\nINSERT INTO t1\nSELECT a, PERIOD(b, c)\nFROM t2;\n\nUSING (empno INTEGER,\nname VARCHAR(50),\nsalary INTEGER)\nMERGE INTO employee AS t\nUSING VALUES (:empno, :name, :salary) AS s(empno, name, salary)\nON t.empno=s.empno\nWHEN MATCHED THEN UPDATE\nSET salary=s.salary\nWHEN NOT MATCHED THEN INSERT (empno, name, salary)\nVALUES (s.empno, s.name, s.salary);\n\nUSING (empno INTEGER,\nname VARCHAR(50),\nsalary INTEGER)\nUPDATE employee\nSET salary=:salary\nWHERE empno=:empno\nELSE INSERT INTO employee\n(empno, name, salary) VALUES ( :empno, :name, :salary);\n\nUSING (empno INTEGER,\nsalary INTEGER)\nMERGE INTO employee AS t\nUSING (SELECT :empno, :salary, name\nFROM names\nWHERE empno=:empno) AS s(empno, salary, name)\nON t.empno=s.empno\nWHEN MATCHED THEN UPDATE\nSET salary=s.salary, name = s.name\nWHEN NOT MATCHED THEN INSERT (empno, name, salary)\nVALUES (s.empno, s.name, s.salary);\n\nMERGE INTO emp\nUSING VALUES (100, 'cc', 200, 3333) AS emp1 (empnum, name,\ndeptno, sal)\nON emp1.empnum=emp.s_no\nWHEN MATCHED THEN\nUPDATE SET sal=DEFAULT\nWHEN NOT MATCHED THEN\nINSERT VALUES (emp1.empnum, emp1.name, emp1.deptno, emp1.sal);\nMERGE INTO emp\nUSING VALUES (100, 'cc', 200, 3333) AS emp1 (empnum, name,\ndeptno, sal)\nON emp1.empnum=emp.s_no\nWHEN MATCHED THEN\nUPDATE SET sal=DEFAULT(emp.sal)\nWHEN NOT MATCHED THEN\nINSERT VALUES (emp1.empnum, emp1.name, emp1.deptno, emp1.sal)\n;\n\nMERGE INTO t1\nUSING t2\nON t1.x1=t2.z2 AND t1.y1=t2.y2\nWHEN MATCHED THEN\nUPDATE SET z1=10\nWHEN NOT MATCHED THEN\nINSERT (z2,y2,x2);\n\nMERGE INTO t1\nUSING (SELECT *\nFROM t2\nWHERE y2=10) AS s\nON x1=10\nWHEN MATCHED THEN\nUPDATE SET z1=z2\nWHEN NOT MATCHED THEN\nINSERT (x2, y2, z2);\n\nUPDATE sales_sum_table AS ss\nSET total_sales = (SELECT sum(amount)\nFROM sales_table AS s\nWHERE s.day_of_sale BETWEEN ss.period_start\nAND ss.period_end);\n\n-- The following UPDATE request updates the NoPI table nopi012_t1 aliased as t1.\nUPDATE t1\nFROM nopi012_t1 AS t1, nopi012_t2 AS t2\nSET c3 = t1.c3 * 1.05\nWHERE t1.c2 = t2.c2;",
    vertica: `-- hp vertica sample sql\n\nCREATE VIEW myview AS\nSELECT SUM(annual_income), customer_state\nFROM public.customer_dimension\nWHERE customer_key IN\n(SELECT customer_key\nFROM store.store_sales_fact)\nGROUP BY customer_state\nORDER BY customer_state ASC;\n\nINSERT INTO t1 (col1, col2) (SELECT 'abc', mycolumn FROM mytable);\n\nMERGE INTO t USING s ON (t.c1 = s.c1)\nWHEN NOT MATCHED THEN INSERT (c1, c2) VALUES (s.c1, s.c2);\n\n-- First WITH clause,regional_sales\nWITH\nregional_sales AS (\nSELECT region, SUM(amount) AS total_sales\nFROM orders\nGROUP BY region),\n-- Second WITH clause top_regions\ntop_regions AS (\nSELECT region\nFROM regional_sales\nWHERE total_sales > (SELECT SUM (total_sales)/10 FROM regional_sales) )\n-- End defining WITH clause statement\n-- Begin main primary query\nSELECT region,\nproduct,\nSUM(quantity) AS product_units,\nSUM(amount) AS product_sales\nFROM orders\nWHERE region IN (SELECT region FROM top_regions)\n;`,
}